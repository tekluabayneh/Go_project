// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, update_at, name, api_key) 
VALUES($1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'))
RETURNING id, created_at, update_at, name, api_key
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdateAt  time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdateAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIkey = `-- name: GetUserByAPIkey :one

SELECT  FROM users WHERE api_key = $1
`

type GetUserByAPIkeyRow struct {
}

func (q *Queries) GetUserByAPIkey(ctx context.Context, apiKey string) (GetUserByAPIkeyRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIkey, apiKey)
	var i GetUserByAPIkeyRow
	err := row.Scan()
	return i, err
}
